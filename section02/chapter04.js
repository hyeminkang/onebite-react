// 1. spread 연산자
// ㄴ 흩뿌리다, 펼치다 
// 객체나 배열에 저장된 여러개의 값을 개별로 흩뿌려주는 역할
let arr1 = [1,2,3];
let arr2 = [4,5,6];
// arr2 배열 4,5 사이에 arr1의 배열을 흩뿌리고싶다~ 그때 사용
// 원래대로라련
let arr2_2 = [4,arr1[0],arr1[1],arr1[2],5,6];
console.log(arr2_2)// 4,1,2,3,5,6 출력
// 저런방식이 귀찮고 위험해요~ 왜냐면, 나중에 더 추가된다면?
// 아니면 몇개쯤 삭제가 된다면?
// 원래 배열이 막 값을 바꾸려고 쓰는거임~ 
// 그래서 인덱스로 펼쳐두는건 좋은 방법이 아님 
// 이럴때 스프레드 연산자를 이용하면 안전하고 편하게 할수있음!

let arrOri = [4, ... arr1, 5,6] // ... 이 스프레드 연산자임!
console.log(arrOri);

// 스프레드 연산자는 배열뿐만 아니라 객체에도 사용 가능함!

let obj1 = {
    a: 1,
    b: 2,
};

let obj2 = {
    c: 3,
    d: 4,
};

// 원래대로라면~ 
// let obj2 = {
//     a: obj1.a,
//     b: obj1.b,
//     c: 3,
//     d: 4,
// };

// 근데 그냥
let obj2_2 = {
    ...obj1,
    c: 3,
    d: 4,
};
console.log(obj2_2) // {a: 1, b: 2, c: 3, d: 4} 출력

// 스프레드 연산자는 함수에도 호출가능함!
function funcA() {

}
funcA();
// 이 함수를 호출하면서 인수로, arr1의 배열의 값을 순서대로 전달하고 싶다면!
function funcAOri(p1, p2, p3) { // arr1 이 들어올걸 가정하여 매개변수 3가지를 만들고
 console.log(p1,p2,p3);// 출력해본다  그러면 arr1 배열에 있는 1,2,3 이 잘 출력됨
}
funcAOri(...arr1);



// 2. rest 매개변수
// rest는 나머지라는 뜻, 나머지 매개변수라는 뜻을 가지고있음
// rest매개변수는 상단 위에 funcAOri 함수처럼 여러개의 매개변수를 받아야할떄,
// 배열의 형태로 한방에 여러개의 매개변수를 받아올 수 있도록 해주는 그런 문법
function funcB(...rest) { // 한방에 모든 매개변수 받기가능
    console.log(rest)
}
funcB(...arr1);
// ...은 매개변수를 정의하는 공간인 소괄호안에 사용이 되었기 때문에 
// spread 변산자가 아니라 rest매개변수라는점을 주의해줘야함

// 혹시 첫번째 매개변수느 다른 이름으로 받고싶어! 라고한다면
function funcBex(one1,...rest) { // 이렇게하면, one1은 rest의 첫번째 인수인 1이 저장되고, rest에는 2,3만 저장됨 
    console.log(rest)
    console.log(one1)
    
}
funcBex(...arr1);
// 주의사항
// rest 매개변수뒤에는 추가적으로 매개변수를 더 선언할수없음!!
// 이러면 오류발생함 
// rest는 나오는 모든 인수들으 배열에 저장하기때문에, 그 이후에 나오는건 오류가 됨 